version = getMavenVersion()
group = "com.urbanairship.android"

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: "maven"

// For test coverage reports
apply plugin: 'jacoco'


repositories {
    maven { url "https://raw.github.com/synergian/wagon-git/releases" }
}
configurations {
    deployLibrary
}

dependencies {
    deployLibrary "ar.com.synergian:wagon-git:0.2.5"
}


task lookForArtifacts {
    doLast {
        def artifactName = ARTIFACT_NAME + '-' + ARTIFACT_VERSION + '.aar'
        def artifactPath = ARTIFACT_PACKAGE.replace(".", "/") + "/" + ARTIFACT_NAME + "/" + ARTIFACT_VERSION + "/" + artifactName
        def repositoryUrl = 'https://api.bitbucket.org/1.0/repositories/' + COMPANY + '/' + REPOSITORY_NAME + '/raw/releases/' + artifactPath

        println("")
        println("Checking if artifact already exists: " + artifactName)
        println("at URL: " + repositoryUrl)

        return true
    }
}


uploadArchives.dependsOn lookForArtifacts

uploadArchives {

    repositories.mavenDeployer {
        configuration = configurations.deployLibrary
        repository(url: 'git:releases://git@bitbucket.org:' + COMPANY + '/' + REPOSITORY_NAME + '.git')

        uniqueVersion = true

        pom.project {
            groupId = ARTIFACT_PACKAGE
            version = ARTIFACT_VERSION
            artifactId = ARTIFACT_NAME
            packaging ARTIFACT_PACKAGING
        }
    }
}






android {
    compileSdkVersion 27

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27

        buildConfigField "String", "URBAN_AIRSHIP_VERSION", "\"${getMavenVersion()}\""
        buildConfigField "String", "SDK_VERSION", "\"${getSdkVersionString()}\""

        consumerProguardFiles 'proguard-rules.pro'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            name 'Urban Airship'
        }
    }

    scm {
        connection 'https://github.com/urbanairship/android-library.git'
        url 'https://github.com/urbanairship/android-library'
    }
}


publishing {
    publications {
        Production(MavenPublication) {

            artifact("$buildDir/outputs/aar/" + project.name + "-release.aar")
            groupId project.group
            artifactId project.name

            pom.withXml {
                def root = asNode()

                def dependenciesNode = root.appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }

                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                root.appendNode('url', 'https://github.com/urbanairship/android-library')
                root.children().last() + pomConfig
            }
        }
    }
}


bintray {
    user = "$System.env.BINTRAY_USER"
    key = "$System.env.BINTRAY_API_KEY"

    if (project.hasProperty('bintrayUser') && project.hasProperty('bintrayApiKey')) {
        // Credentials should be stored in ~/.gradle/gradle.properties
        user = bintrayUser
        key = bintrayApiKey
    }

    publications = ['Production']

    pkg {
        repo = 'android'
        userOrg = 'urbanairship'
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/urbanairship/android-library'
        licenses = ['Apache-2.0']
        publish = true
        vcsUrl = 'https://github.com/urbanairship/android-library.git'
        version {
            desc = project.description
            name = project.version
            released = new Date()

            mavenCentralSync {
                user = "$System.env.MAVEN_USER"
                password = "$System.env.MAVEN_PASSWORD"

                if (project.hasProperty('mavenUser') && project.hasProperty('mavenPassword')) {
                    // Credentials should be stored in ~/.gradle/gradle.properties
                    user = mavenUser
                    password = mavenPassword
                }

                sync = true
                close = '1'
            }
        }
    }
}

def getSdkVersionString() {
    def result = "!SDK-VERSION-STRING!:" + project.group + ":" + project.name + ":"
    if (airshipProperties['versionQualifier']) {
        result += airshipProperties.versionQualifier + ":"
    }
    result += airshipProperties.version
    return result
}

def getMavenVersion() {
    def result = airshipProperties.version
    if (airshipProperties['versionQualifier']) {
        result += "-" + airshipProperties.versionQualifier
    }
    return result
}

def getDexMethodCount() {
    try {
        def dx = "${android.getSdkDirectory()}/build-tools/${android.getBuildToolsRevision()}/dx"
        def jar = "${project.buildDir}/intermediates/bundles/release/classes.jar"
        def output = new ByteArrayOutputStream()
        exec {
            commandLine "../tools/dex-method-count.sh", dx, jar
            standardOutput = output
        }
        return output.toString().trim()
    } catch (e) {
        println(e)
        return ""
    }
}

task runDexMethodCount {
    doLast {
        def count = getDexMethodCount()

        File dex = file("${project.buildDir}/dex-counts/release")
        dex.getParentFile().mkdirs()
        dex.text = "Dex Method Count: ${count}"
        println("Dex Method Count: ${count}")
    }
}

project.afterEvaluate {
    runDexMethodCount.dependsOn(assembleRelease)
    bintrayUpload.dependsOn(assembleRelease)
}
